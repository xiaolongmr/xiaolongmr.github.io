"use strict"; // 启用严格模式

// 定义一个辅助函数 _classCallCheck 用于检查实例类型
function _classCallCheck(e, t) {
    // 如果 e 不是 t 的实例，抛出类型错误
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}

// 定义一个辅助函数 _createClass 用于创建类
var _createClass = function () {
    // 内部函数 e 用于定义属性
    function e(e, t) {
        // 遍历属性数组 t
        for (var a = 0; a < t.length; a++) {
            var s = t[a];
            // 设置属性的可枚举性、可配置性和可写性
            s.enumerable = s.enumerable || !1;
            s.configurable = !0;
            "value" in s && (s.writable = !0);
            // 使用 Object.defineProperty 定义属性
            Object.defineProperty(e, s.key, s);
        }
    }

    // 返回一个新的函数，用于创建类
    return function (t, a, s) {
        // 如果有实例属性，定义这些属性
        return a && e(t.prototype, a),
            // 如果有静态属性，定义这些属性
            s && e(t, s),
            // 返回类的构造函数
            t;
    }
}();

// 自执行匿名函数，用于创建 OwO 类
(function () {
    // 定义 OwO 类
    var e = function () {
        // OwO 类的构造函数
        function e(t) {
            var a = this;
            // 检查 this 是否是 OwO 的实例
            _classCallCheck(this, e);

            // 定义默认配置
            var s = {
                logo: "OwO表情",
                container: document.getElementsByClassName("OwO")[0],
                target: document.getElementsByTagName("textarea")[0],
                position: "down",
                width: "100%",
                maxHeight: "250px",
                api: "https://api.anotherhome.net/OwO/OwO.json"
            };

            // 合并用户配置和默认配置
            for (var n in s)
                s.hasOwnProperty(n) && !t.hasOwnProperty(n) && (t[n] = s[n]);

            this.container = t.container;
            this.target = t.target;

            // 如果 position 是 'up'，添加相应的 CSS 类
            "up" === t.position && this.container.classList.add("OwO-up");

            // 创建一个新的 XMLHttpRequest 对象
            var i = new XMLHttpRequest;

            // 定义 XMLHttpRequest 的回调函数
            i.onreadystatechange = function () {
                // 当请求完成时
                if (4 === i.readyState) {
                    // 如果请求成功，解析数据并初始化
                    if (i.status >= 200 && i.status < 300 || 304 === i.status) {
                        a.odata = JSON.parse(i.responseText);
                        a.init(t);
                    } else {
                        // 如果请求失败，输出错误信息
                        console.log("OwO data request was unsuccessful: " + i.status);
                    }
                }
            };

            // 初始化请求
            i.open("get", t.api, !0);
            // 发送请求
            i.send(null);
        }

        // 定义 OwO 类的方法
        return _createClass(e, [{
            key: "init",
            // 初始化方法
            value: function (e) {
                var t = this;
                // 设置目标区域
                this.area = e.target;
                // 获取表情包名称列表
                this.packages = Object.keys(this.odata);

                // 构建 HTML 结构
                for (var a = '\n<div class="OwO-logo"><span>' + e.logo + '</span></div>\n<div class="OwO-body" style="width: ' + e.width + '">',
                    s = 0; s < this.packages.length; s++) {
                    a += '\n<ul class="OwO-items OwO-items-' + this.odata[this.packages[s]].type + '" style="max-height: ' + (parseInt(e.maxHeight) - 53 + "px") + ';">';
                    for (var n = this.odata[this.packages[s]].container, i = 0; i < n.length; i++)
                        a += '\n<li class="OwO-item" title="' + n[i].text + '">' + n[i].icon + "</li>";
                    a += "\n</ul>";
                }

                a += '\n<div class="OwO-bar">\n<ul class="OwO-packages">';
                for (var o = 0; o < this.packages.length; o++)
                    a += "\n<li><span>" + this.packages[o] + "</span></li>";
                a += "\n</ul>\n</div>\n</div>\n";

                // 将生成的 HTML 插入到容器中
                this.container.innerHTML = a;

                // 获取并绑定 OwO-logo 的点击事件
                this.logo = this.container.getElementsByClassName("OwO-logo")[0];
                this.logo.addEventListener("click", function () {
                    t.toggle();
                });

                // 绑定表情点击事件
                this.container.getElementsByClassName("OwO-body")[0].addEventListener("click", function (e) {
                    var a = null;
                    if (e.target.classList.contains("OwO-item"))
                        a = e.target;
                    else if (e.target.parentNode.classList.contains("OwO-item"))
                        a = e.target.parentNode;

                    if (a) {
                        var s = t.area.selectionEnd,
                            n = t.area.value;
                        t.area.value = n.slice(0, s) + a.innerHTML + n.slice(s);
                        t.area.focus();
                        t.toggle();
                    }
                });

                // 获取 OwO-packages 元素
                this.packagesEle = this.container.getElementsByClassName("OwO-packages")[0];
                for (var c = function (e) {
                    !function (a) {
                        t.packagesEle.children[e].addEventListener("click", function () {
                            t.tab(a);
                        });
                    }(e);
                },
                    l = 0; l < this.packagesEle.children.length; l++)
                    c(l);
                this.tab(0);
            }
        },
        {
            key: "toggle",
            // 切换显示/隐藏 OwO 面板
            value: function () {
                this.container.classList.contains("OwO-open") ?
                    this.container.classList.remove("OwO-open") :
                    this.container.classList.add("OwO-open");
            }
        },
        {
            key: "tab",
            // 切换表情包
            value: function (e) {
                var t = this.container.getElementsByClassName("OwO-items-show")[0];
                t && t.classList.remove("OwO-items-show");
                this.container.getElementsByClassName("OwO-items")[e].classList.add("OwO-items-show");

                var a = this.container.getElementsByClassName("OwO-package-active")[0];
                a && a.classList.remove("OwO-package-active");
                this.packagesEle.getElementsByTagName("li")[e].classList.add("OwO-package-active");
            }
        }]),
            e;
    }();

    // 判断是否在 Node.js 环境中，如果是则导出 OwO 类，否则将 OwO 类绑定到 window 对象
    "undefined" != typeof module && "undefined" != typeof module.exports ?
        module.exports = e :
        window.OwO = e;
})();

// # sourceMappingURL=OwO.min.js.map
